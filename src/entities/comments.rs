//! SeaORM Entity. Generated by sea-orm-codegen 0.9.0

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "comments")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub comment_id: u32,
    pub post_id: u32,
    pub author_id: Option<u32>,
    pub anon_name: Option<String>,
    #[sea_orm(column_type = "Text")]
    pub body: String,
    pub comment_date: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::users::Entity",
        from = "Column::AuthorId",
        to = "super::users::Column::UserId",
        on_update = "Cascade",
        on_delete = "SetNull"
    )]
    Users,
    #[sea_orm(
        belongs_to = "super::blog_posts::Entity",
        from = "Column::PostId",
        to = "super::blog_posts::Column::PostId",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    BlogPosts,
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Users.def()
    }
}

impl Related<super::blog_posts::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BlogPosts.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
